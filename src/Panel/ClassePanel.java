/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panel;

import bean.Cycle;
import controller.AnneeScolaireController;
import controller.ClasseController;
import controller.CycleController;
import controller.EleveController;
import dialog.ClasseDialog;
import dialog.CycleDialog;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import rojerusan.RSPanelImage;

/**
 *
 * @author ATH
 */
public class ClassePanel extends RSPanelImage {

    /**
     * Creates new form ElevePan
     */
    public ClassePanel() {
        anneeScolaireController = new AnneeScolaireController();
        cycleController = new CycleController();
        classeController = new ClasseController();
        eleveController = new EleveController();
        initComponents();
        initCbAnnee();
        initCbCycle();
        try {
            rSComboMetro_annee.setSelectedItem(anneeScolaireController.getAnneeScolaireEnCours().getAnnee());
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_table_cycle = new javax.swing.JPopupMenu();
        menu_item_add_cycle = new javax.swing.JMenuItem();
        menu_item_update_cycle = new javax.swing.JMenuItem();
        menu_item_remove_cycle = new javax.swing.JMenuItem();
        popup_table_classe = new javax.swing.JPopupMenu();
        menu_item_add_classe = new javax.swing.JMenuItem();
        menu_item_update_classe = new javax.swing.JMenuItem();
        menu_item_remove_classe = new javax.swing.JMenuItem();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_cycle = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_classe = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rSComboMetro_annee = new rojerusan.RSComboMetro();
        jLabel6 = new javax.swing.JLabel();
        rSComboMetro_cycle = new rojerusan.RSComboMetro();
        jSeparator1 = new javax.swing.JSeparator();

        menu_item_add_cycle.setText("Ajouter un nouveau cycle");
        menu_item_add_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_add_cycleActionPerformed(evt);
            }
        });
        popup_table_cycle.add(menu_item_add_cycle);

        menu_item_update_cycle.setText("Modifier le cycle");
        menu_item_update_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_update_cycleActionPerformed(evt);
            }
        });
        popup_table_cycle.add(menu_item_update_cycle);

        menu_item_remove_cycle.setText("Retirer le cycle");
        menu_item_remove_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_remove_cycleActionPerformed(evt);
            }
        });
        popup_table_cycle.add(menu_item_remove_cycle);

        menu_item_add_classe.setText("Ajouter nouvelle classe");
        menu_item_add_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_add_classeActionPerformed(evt);
            }
        });
        popup_table_classe.add(menu_item_add_classe);

        menu_item_update_classe.setText("Modifier la classe");
        menu_item_update_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_update_classeActionPerformed(evt);
            }
        });
        popup_table_classe.add(menu_item_update_classe);

        menu_item_remove_classe.setText("Retirer la classe");
        popup_table_classe.add(menu_item_remove_classe);

        setImagen(new javax.swing.ImageIcon(getClass().getResource("/icon/getty_655998316_2000149920009280219_363765.jpg"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1100, 700));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Liste des filières", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseReleased(evt);
            }
        });

        jTable_cycle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "CYCLE", "EFFECTIF", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_cycle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_cycleMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_cycleMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable_cycle);
        if (jTable_cycle.getColumnModel().getColumnCount() > 0) {
            jTable_cycle.getColumnModel().getColumn(0).setMinWidth(50);
            jTable_cycle.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable_cycle.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable_cycle.getColumnModel().getColumn(2).setMinWidth(150);
            jTable_cycle.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable_cycle.getColumnModel().getColumn(2).setMaxWidth(150);
            jTable_cycle.getColumnModel().getColumn(3).setMinWidth(10);
            jTable_cycle.getColumnModel().getColumn(3).setPreferredWidth(10);
            jTable_cycle.getColumnModel().getColumn(3).setMaxWidth(10);
        }

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(0, 102, 102), new java.awt.Color(51, 51, 255)), "Liste des options"));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseReleased(evt);
            }
        });

        jTable_classe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "N°", "CYCLE", "CLASSE", "EFFECTIF", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_classe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable_classeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_classe);
        if (jTable_classe.getColumnModel().getColumnCount() > 0) {
            jTable_classe.getColumnModel().getColumn(0).setMinWidth(50);
            jTable_classe.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable_classe.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable_classe.getColumnModel().getColumn(1).setMinWidth(200);
            jTable_classe.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable_classe.getColumnModel().getColumn(1).setMaxWidth(200);
            jTable_classe.getColumnModel().getColumn(3).setMinWidth(150);
            jTable_classe.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable_classe.getColumnModel().getColumn(3).setMaxWidth(150);
            jTable_classe.getColumnModel().getColumn(4).setMinWidth(10);
            jTable_classe.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable_classe.getColumnModel().getColumn(4).setMaxWidth(10);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Année");

        rSComboMetro_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSComboMetro_anneeActionPerformed(evt);
            }
        });

        jLabel6.setText("Cycle");

        rSComboMetro_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSComboMetro_cycleActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rSComboMetro_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rSComboMetro_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rSComboMetro_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(rSComboMetro_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menu_item_add_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_add_cycleActionPerformed
        dialog.CycleDialog cycleDialog = new dialog.CycleDialog(null, true);
        cycleDialog.setVisible(true);
        initTableCycle();
    }//GEN-LAST:event_menu_item_add_cycleActionPerformed

    private void menu_item_update_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_update_cycleActionPerformed
        dialog.CycleDialog cycleDialog = new CycleDialog(null, true, jTable_cycle.getValueAt(jTable_cycle.getSelectedRow(), 3).toString());
        cycleDialog.setVisible(true);
        initTableCycle();
    }//GEN-LAST:event_menu_item_update_cycleActionPerformed

    private void menu_item_remove_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_remove_cycleActionPerformed
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le cycle " + jTable_cycle.getValueAt(jTable_cycle.getSelectedRow(), 3) + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if(choice == 0){
            cycleController.removeCycle(jTable_cycle.getValueAt(jTable_cycle.getSelectedRow(), 3).toString());
        }
        initTableCycle();
    }//GEN-LAST:event_menu_item_remove_cycleActionPerformed

    private void jScrollPane3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseReleased
        int r = jTable_cycle.rowAtPoint(evt.getPoint());
        if(r >=0 && r < jTable_cycle.getRowCount()){
            jTable_cycle.setRowSelectionInterval(r, r);

        }else{
            jTable_cycle.clearSelection();
        }
        int index = jTable_cycle.getSelectedRow();
        if(index < 0){
            menu_item_remove_cycle.setEnabled(false);
            menu_item_update_cycle.setEnabled(false);
        }else{
            menu_item_add_cycle.setEnabled(true);
            menu_item_remove_cycle.setEnabled(true);
            menu_item_update_cycle.setEnabled(true);
        }
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JScrollPane){
            popup_table_cycle.show(evt.getComponent(), evt.getX(), evt.getY());
            popup_table_cycle.setVisible(true);
        }
    }//GEN-LAST:event_jScrollPane3MouseReleased

    private void jTable_cycleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_cycleMouseReleased
        int r = jTable_cycle.rowAtPoint(evt.getPoint());
        if(r >=0 && r < jTable_cycle.getRowCount()){
            jTable_cycle.setRowSelectionInterval(r, r);

        }else{
            jTable_cycle.clearSelection();
        }
        int index = jTable_cycle.getSelectedRow();
        if(index < 0){
            menu_item_remove_cycle.setEnabled(false);
            menu_item_update_cycle.setEnabled(false);
        }else{
            menu_item_add_cycle.setEnabled(true);
            menu_item_remove_cycle.setEnabled(true);
            menu_item_update_cycle.setEnabled(true);
        }
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JTable){
            popup_table_cycle.show(evt.getComponent(), evt.getX(), evt.getY());
            popup_table_cycle.setVisible(true);
        }
    }//GEN-LAST:event_jTable_cycleMouseReleased

    private void jTable_classeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_classeMouseReleased
        int index = jTable_classe.getSelectedRow();
        if(index < 0){
            menu_item_remove_classe.setEnabled(false);
            menu_item_update_classe.setEnabled(false);
        }else{
            menu_item_add_classe.setEnabled(true);
            menu_item_remove_classe.setEnabled(true);
            menu_item_update_classe.setEnabled(true);
        }
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JTable){
            popup_table_classe.show(evt.getComponent(), evt.getX(), evt.getY());
            popup_table_classe.setVisible(true);
        }
    }//GEN-LAST:event_jTable_classeMouseReleased

    private void jScrollPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseReleased
        int index = jTable_classe.getSelectedRow();
        if(index < 0){
            menu_item_remove_classe.setEnabled(false);
            menu_item_update_classe.setEnabled(false);
        }else{
            menu_item_add_classe.setEnabled(true);
            menu_item_remove_classe.setEnabled(true);
            menu_item_update_classe.setEnabled(true);
        }
        if(evt.isPopupTrigger() && evt.getComponent() instanceof JScrollPane){
            popup_table_classe.show(evt.getComponent(), evt.getX(), evt.getY());
            popup_table_classe.setVisible(true);
        }
    }//GEN-LAST:event_jScrollPane1MouseReleased

    private void menu_item_add_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_add_classeActionPerformed
        dialog.ClasseDialog classeDialog = new ClasseDialog(null, true);
        classeDialog.setVisible(true);
        initTableClasse();
    }//GEN-LAST:event_menu_item_add_classeActionPerformed

    private void menu_item_update_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_update_classeActionPerformed
        dialog.ClasseDialog classeDialog = new ClasseDialog(null, true, classeController.getClasse(jTable_classe.getValueAt(jTable_classe.getSelectedRow(), 4).toString(), rSComboMetro_annee.getSelectedItem().toString()));
        classeDialog.setVisible(true);
        initTableClasse();
    }//GEN-LAST:event_menu_item_update_classeActionPerformed

    private void jTable_cycleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_cycleMouseClicked
        int r = jTable_cycle.rowAtPoint(evt.getPoint());
        if(r >=0 && r < jTable_cycle.getRowCount()){
            jTable_cycle.setRowSelectionInterval(r, r);

        }else{
            jTable_cycle.clearSelection();
        }
        int index = jTable_cycle.getSelectedRow();
        if(index < 0){
            
        }else{
            initTableClasse();
        }
        
    }//GEN-LAST:event_jTable_cycleMouseClicked

    private void rSComboMetro_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSComboMetro_anneeActionPerformed
        initTableCycle();
        initTableClasse();
    }//GEN-LAST:event_rSComboMetro_anneeActionPerformed

    private void rSComboMetro_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSComboMetro_cycleActionPerformed
        initTableClasse();
    }//GEN-LAST:event_rSComboMetro_cycleActionPerformed

    private final AnneeScolaireController anneeScolaireController;
    private final CycleController cycleController;
    private final ClasseController classeController;
    private final EleveController eleveController;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable_classe;
    private javax.swing.JTable jTable_cycle;
    private javax.swing.JMenuItem menu_item_add_classe;
    private javax.swing.JMenuItem menu_item_add_cycle;
    private javax.swing.JMenuItem menu_item_remove_classe;
    private javax.swing.JMenuItem menu_item_remove_cycle;
    private javax.swing.JMenuItem menu_item_update_classe;
    private javax.swing.JMenuItem menu_item_update_cycle;
    private javax.swing.JPopupMenu popup_table_classe;
    private javax.swing.JPopupMenu popup_table_cycle;
    private rojerusan.RSComboMetro rSComboMetro_annee;
    private rojerusan.RSComboMetro rSComboMetro_cycle;
    // End of variables declaration//GEN-END:variables

//    private void success_information() {
//        JOptionPane.showMessageDialog(this, "Opération effectuée avec succes ", "Réussie !", JOptionPane.INFORMATION_MESSAGE);
//    }
    
    private void initTableCycle(){
        String entete[] = {"N°", "CYCLE", "EFFECTIF", "ID"};
        DefaultTableModel dt = new DefaultTableModel(null,entete);
        dt.setRowCount(0);
        if(rSComboMetro_annee.getSelectedIndex() < 0){
            return;
        }
        ArrayList<String> list_Cycle = cycleController.getListCycle();

        for(int i = 0; i< list_Cycle.size(); i++){
            Object colonne[] = new Object[4];
            colonne[0] = i + 1;
            colonne[1] = list_Cycle.get(i);
            colonne[2] = eleveController.getEleveCount(new Cycle(list_Cycle.get(i)), rSComboMetro_annee.getSelectedItem().toString(), true);
            colonne[3] = list_Cycle.get(i);
            dt.addRow(colonne);
        }
        this.jTable_cycle.setModel(dt);
        if (jTable_cycle.getColumnModel().getColumnCount() > 0) {
            jTable_cycle.getColumnModel().getColumn(0).setMinWidth(50);
            jTable_cycle.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable_cycle.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable_cycle.getColumnModel().getColumn(2).setMinWidth(150);
            jTable_cycle.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable_cycle.getColumnModel().getColumn(2).setMaxWidth(150);
            jTable_cycle.getColumnModel().getColumn(3).setMinWidth(10);
            jTable_cycle.getColumnModel().getColumn(3).setPreferredWidth(10);
            jTable_cycle.getColumnModel().getColumn(3).setMaxWidth(10);
            jTable_cycle.setRowHeight(30);
        }
    }
    private void initTableClasse(){
        String entete[] = {"N°", "CYCLE", "CLASSE", "EFFECTIF", "ID"};
        DefaultTableModel dt = new DefaultTableModel(null,entete);
        dt.setRowCount(0);
        String annee = null, cycle = null;
        if(rSComboMetro_annee.getSelectedIndex() > -1){
            annee = rSComboMetro_annee.getSelectedItem().toString();
        }
        if(rSComboMetro_cycle.getSelectedIndex() > -1){
            cycle = rSComboMetro_cycle.getSelectedItem().toString();
        }
        ArrayList<bean.Classe> list_classe = classeController.getListClasse(annee, cycle);
        
        for(int i = 0; i< list_classe.size(); i++){
            Object colonne[] = new Object[5];
            colonne[0] = i + 1;
            colonne[1] = list_classe.get(i).getCycle();
            colonne[2] = list_classe.get(i).getClasse();
            colonne[3] = eleveController.getEleveCount(list_classe.get(i), true);
            colonne[4] = list_classe.get(i).getClasse();
            dt.addRow(colonne);
        }
        this.jTable_classe.setModel(dt);
        
        if (jTable_classe.getColumnModel().getColumnCount() > 0) {
            jTable_classe.getColumnModel().getColumn(0).setMinWidth(50);
            jTable_classe.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable_classe.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable_classe.getColumnModel().getColumn(1).setMinWidth(200);
            jTable_classe.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable_classe.getColumnModel().getColumn(1).setMaxWidth(200);
            jTable_classe.getColumnModel().getColumn(3).setMinWidth(150);
            jTable_classe.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable_classe.getColumnModel().getColumn(3).setMaxWidth(150);
            jTable_classe.getColumnModel().getColumn(4).setMinWidth(10);
            jTable_classe.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable_classe.getColumnModel().getColumn(4).setMaxWidth(10);
            jTable_classe.setRowHeight(30);
        }
    }
    
    
    private void initCbAnnee(){
        rSComboMetro_annee.removeAllItems();
        anneeScolaireController.getListAnneeScolaire().forEach((a) -> {
            rSComboMetro_annee.addItem(a.getAnnee());
        });
    }
    private void initCbCycle(){
        rSComboMetro_cycle.removeAllItems();
        cycleController.getListCycle().forEach((c) -> {
            rSComboMetro_cycle.addItem(c);
        });
        if(rSComboMetro_cycle.getItemCount() > 1){
            rSComboMetro_cycle.addItem("Tous");
        }
    }
}
